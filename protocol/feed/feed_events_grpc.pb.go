// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: feed_events.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedEvents_EventsSubscribe_FullMethodName = "/feed.FeedEvents/EventsSubscribe"
)

// FeedEventsClient is the client API for FeedEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedEventsClient interface {
	EventsSubscribe(ctx context.Context, in *EventsSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeedItem], error)
}

type feedEventsClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedEventsClient(cc grpc.ClientConnInterface) FeedEventsClient {
	return &feedEventsClient{cc}
}

func (c *feedEventsClient) EventsSubscribe(ctx context.Context, in *EventsSubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeedItem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeedEvents_ServiceDesc.Streams[0], FeedEvents_EventsSubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventsSubscribeRequest, FeedItem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeedEvents_EventsSubscribeClient = grpc.ServerStreamingClient[FeedItem]

// FeedEventsServer is the server API for FeedEvents service.
// All implementations must embed UnimplementedFeedEventsServer
// for forward compatibility.
type FeedEventsServer interface {
	EventsSubscribe(*EventsSubscribeRequest, grpc.ServerStreamingServer[FeedItem]) error
	mustEmbedUnimplementedFeedEventsServer()
}

// UnimplementedFeedEventsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedEventsServer struct{}

func (UnimplementedFeedEventsServer) EventsSubscribe(*EventsSubscribeRequest, grpc.ServerStreamingServer[FeedItem]) error {
	return status.Errorf(codes.Unimplemented, "method EventsSubscribe not implemented")
}
func (UnimplementedFeedEventsServer) mustEmbedUnimplementedFeedEventsServer() {}
func (UnimplementedFeedEventsServer) testEmbeddedByValue()                    {}

// UnsafeFeedEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedEventsServer will
// result in compilation errors.
type UnsafeFeedEventsServer interface {
	mustEmbedUnimplementedFeedEventsServer()
}

func RegisterFeedEventsServer(s grpc.ServiceRegistrar, srv FeedEventsServer) {
	// If the following call pancis, it indicates UnimplementedFeedEventsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedEvents_ServiceDesc, srv)
}

func _FeedEvents_EventsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedEventsServer).EventsSubscribe(m, &grpc.GenericServerStream[EventsSubscribeRequest, FeedItem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeedEvents_EventsSubscribeServer = grpc.ServerStreamingServer[FeedItem]

// FeedEvents_ServiceDesc is the grpc.ServiceDesc for FeedEvents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedEvents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.FeedEvents",
	HandlerType: (*FeedEventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventsSubscribe",
			Handler:       _FeedEvents_EventsSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feed_events.proto",
}
