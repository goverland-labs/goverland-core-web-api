// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: feed_events.proto

package feed

import (
	"reflect"
	"sync"
	"unsafe"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedItemType int32

const (
	FeedItemType_FEED_ITEM_TYPE_UNSPECIFIED FeedItemType = 0
	FeedItemType_FEED_ITEM_TYPE_DAO         FeedItemType = 1
	FeedItemType_FEED_ITEM_TYPE_PROPOSAL    FeedItemType = 2
	FeedItemType_FEED_ITEM_TYPE_DELEGATE    FeedItemType = 3
	FeedItemType_FEED_ITEM_TYPE_VOTE        FeedItemType = 4
)

// Enum value maps for FeedItemType.
var (
	FeedItemType_name = map[int32]string{
		0: "FEED_ITEM_TYPE_UNSPECIFIED",
		1: "FEED_ITEM_TYPE_DAO",
		2: "FEED_ITEM_TYPE_PROPOSAL",
		3: "FEED_ITEM_TYPE_DELEGATE",
		4: "FEED_ITEM_TYPE_VOTE",
	}
	FeedItemType_value = map[string]int32{
		"FEED_ITEM_TYPE_UNSPECIFIED": 0,
		"FEED_ITEM_TYPE_DAO":         1,
		"FEED_ITEM_TYPE_PROPOSAL":    2,
		"FEED_ITEM_TYPE_DELEGATE":    3,
		"FEED_ITEM_TYPE_VOTE":        4,
	}
)

func (x FeedItemType) Enum() *FeedItemType {
	p := new(FeedItemType)
	*p = x
	return p
}

func (x FeedItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_feed_events_proto_enumTypes[0].Descriptor()
}

func (FeedItemType) Type() protoreflect.EnumType {
	return &file_feed_events_proto_enumTypes[0]
}

func (x FeedItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedItemType.Descriptor instead.
func (FeedItemType) EnumDescriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{0}
}

type EventsSubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// subscriber_id represent inbox global identifier
	SubscriberId string `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// subscription_types describe on which types client would like to subscribe
	SubscriptionTypes []FeedItemType `protobuf:"varint,2,rep,packed,name=subscription_types,json=subscriptionTypes,proto3,enum=feed.FeedItemType" json:"subscription_types,omitempty"`
	// если его нет, то берем сейчас?
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3,oneof" json:"last_updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventsSubscribeRequest) Reset() {
	*x = EventsSubscribeRequest{}
	mi := &file_feed_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsSubscribeRequest) ProtoMessage() {}

func (x *EventsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*EventsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventsSubscribeRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

func (x *EventsSubscribeRequest) GetSubscriptionTypes() []FeedItemType {
	if x != nil {
		return x.SubscriptionTypes
	}
	return nil
}

func (x *EventsSubscribeRequest) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

type Timeline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timeline) Reset() {
	*x = Timeline{}
	mi := &file_feed_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeline) ProtoMessage() {}

func (x *Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeline.ProtoReflect.Descriptor instead.
func (*Timeline) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{1}
}

func (x *Timeline) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Timeline) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DAO struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	InternalId      string                 `protobuf:"bytes,3,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	OriginalId      string                 `protobuf:"bytes,4,opt,name=original_id,json=originalId,proto3" json:"original_id,omitempty"`
	Name            string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Avatar          string                 `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	PopularityIndex float64                `protobuf:"fixed64,7,opt,name=popularity_index,json=popularityIndex,proto3" json:"popularity_index,omitempty"`
	Verified        bool        `protobuf:"varint,8,opt,name=verified,proto3" json:"verified,omitempty"`
	Timeline        []*Timeline `protobuf:"bytes,9,rep,name=timeline,proto3" json:"timeline,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DAO) Reset() {
	*x = DAO{}
	mi := &file_feed_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DAO) ProtoMessage() {}

func (x *DAO) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DAO.ProtoReflect.Descriptor instead.
func (*DAO) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{2}
}

func (x *DAO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DAO) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

func (x *DAO) GetOriginalId() string {
	if x != nil {
		return x.OriginalId
	}
	return ""
}

func (x *DAO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DAO) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *DAO) GetPopularityIndex() float64 {
	if x != nil {
		return x.PopularityIndex
	}
	return 0
}

func (x *DAO) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *DAO) GetTimeline() []*Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type Proposal struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Id                string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	DaoInternalId     string                 `protobuf:"bytes,4,opt,name=dao_internal_id,json=daoInternalId,proto3" json:"dao_internal_id,omitempty"`
	Author            string                 `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Title             string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	State             string                 `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Type              string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Privacy           string                 `protobuf:"bytes,9,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Spam              bool        `protobuf:"varint,10,opt,name=spam,proto3" json:"spam,omitempty"`
	Timeline          []*Timeline `protobuf:"bytes,12,rep,name=timeline,proto3" json:"timeline,omitempty"`
	Choices           []string    `protobuf:"bytes,13,rep,name=choices,proto3" json:"choices,omitempty"`
	OriginalCreatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=original_created_at,json=originalCreatedAt,proto3" json:"original_created_at,omitempty"`
	VotingStartedAt   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=voting_started_at,json=votingStartedAt,proto3" json:"voting_started_at,omitempty"`
	VotingEndedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=voting_ended_at,json=votingEndedAt,proto3" json:"voting_ended_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	mi := &file_feed_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{3}
}

func (x *Proposal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Proposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proposal) GetDaoInternalId() string {
	if x != nil {
		return x.DaoInternalId
	}
	return ""
}

func (x *Proposal) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Proposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Proposal) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Proposal) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Proposal) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *Proposal) GetSpam() bool {
	if x != nil {
		return x.Spam
	}
	return false
}

func (x *Proposal) GetTimeline() []*Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *Proposal) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Proposal) GetOriginalCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OriginalCreatedAt
	}
	return nil
}

func (x *Proposal) GetVotingStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingStartedAt
	}
	return nil
}

func (x *Proposal) GetVotingEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndedAt
	}
	return nil
}

type Delegate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressFrom   string                 `protobuf:"bytes,1,opt,name=address_from,json=addressFrom,proto3" json:"address_from,omitempty"`
	AddressTo     string                 `protobuf:"bytes,2,opt,name=address_to,json=addressTo,proto3" json:"address_to,omitempty"`
	DaoInternalId string                 `protobuf:"bytes,3,opt,name=dao_internal_id,json=daoInternalId,proto3" json:"dao_internal_id,omitempty"`
	ProposalId    string                 `protobuf:"bytes,4,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Action        string                 `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3,oneof" json:"due_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Delegate) Reset() {
	*x = Delegate{}
	mi := &file_feed_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegate) ProtoMessage() {}

func (x *Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegate.ProtoReflect.Descriptor instead.
func (*Delegate) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{4}
}

func (x *Delegate) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *Delegate) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *Delegate) GetDaoInternalId() string {
	if x != nil {
		return x.DaoInternalId
	}
	return ""
}

func (x *Delegate) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *Delegate) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Delegate) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DaoInternalId string                 `protobuf:"bytes,2,opt,name=dao_internal_id,json=daoInternalId,proto3" json:"dao_internal_id,omitempty"`
	ProposalId    string                 `protobuf:"bytes,3,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	VoterAddress  string                 `protobuf:"bytes,4,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VoteId        string                 `protobuf:"bytes,5,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Choice        *anypb.Any             `protobuf:"bytes,6,opt,name=choice,proto3" json:"choice,omitempty"`
	Reason        string                 `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	VotingPower   float32                `protobuf:"fixed32,8,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_feed_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{5}
}

func (x *Vote) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Vote) GetDaoInternalId() string {
	if x != nil {
		return x.DaoInternalId
	}
	return ""
}

func (x *Vote) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *Vote) GetVoterAddress() string {
	if x != nil {
		return x.VoterAddress
	}
	return ""
}

func (x *Vote) GetVoteId() string {
	if x != nil {
		return x.VoteId
	}
	return ""
}

func (x *Vote) GetChoice() *anypb.Any {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *Vote) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Vote) GetVotingPower() float32 {
	if x != nil {
		return x.VotingPower
	}
	return 0
}

type FeedItem struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Type      FeedItemType           `protobuf:"varint,3,opt,name=type,proto3,enum=feed.FeedItemType" json:"type,omitempty"`
	// Types that are valid to be assigned to Snapshot:
	//
	//	*FeedItem_Dao
	//	*FeedItem_Proposal
	//	*FeedItem_Delegate
	//	*FeedItem_Vote
	Snapshot      isFeedItem_Snapshot `protobuf_oneof:"snapshot"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedItem) Reset() {
	*x = FeedItem{}
	mi := &file_feed_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedItem) ProtoMessage() {}

func (x *FeedItem) ProtoReflect() protoreflect.Message {
	mi := &file_feed_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedItem.ProtoReflect.Descriptor instead.
func (*FeedItem) Descriptor() ([]byte, []int) {
	return file_feed_events_proto_rawDescGZIP(), []int{6}
}

func (x *FeedItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeedItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FeedItem) GetType() FeedItemType {
	if x != nil {
		return x.Type
	}
	return FeedItemType_FEED_ITEM_TYPE_UNSPECIFIED
}

func (x *FeedItem) GetSnapshot() isFeedItem_Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *FeedItem) GetDao() *DAO {
	if x != nil {
		if x, ok := x.Snapshot.(*FeedItem_Dao); ok {
			return x.Dao
		}
	}
	return nil
}

func (x *FeedItem) GetProposal() *Proposal {
	if x != nil {
		if x, ok := x.Snapshot.(*FeedItem_Proposal); ok {
			return x.Proposal
		}
	}
	return nil
}

func (x *FeedItem) GetDelegate() *Delegate {
	if x != nil {
		if x, ok := x.Snapshot.(*FeedItem_Delegate); ok {
			return x.Delegate
		}
	}
	return nil
}

func (x *FeedItem) GetVote() *Vote {
	if x != nil {
		if x, ok := x.Snapshot.(*FeedItem_Vote); ok {
			return x.Vote
		}
	}
	return nil
}

type isFeedItem_Snapshot interface {
	isFeedItem_Snapshot()
}

type FeedItem_Dao struct {
	Dao *DAO `protobuf:"bytes,10,opt,name=dao,proto3,oneof"`
}

type FeedItem_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,11,opt,name=proposal,proto3,oneof"`
}

type FeedItem_Delegate struct {
	Delegate *Delegate `protobuf:"bytes,12,opt,name=delegate,proto3,oneof"`
}

type FeedItem_Vote struct {
	Vote *Vote `protobuf:"bytes,13,opt,name=vote,proto3,oneof"`
}

func (*FeedItem_Dao) isFeedItem_Snapshot() {}

func (*FeedItem_Proposal) isFeedItem_Snapshot() {}

func (*FeedItem_Delegate) isFeedItem_Snapshot() {}

func (*FeedItem_Vote) isFeedItem_Snapshot() {}

var File_feed_events_proto protoreflect.FileDescriptor

var file_feed_events_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x65, 0x65, 0x64, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x5d, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x03, 0x44, 0x41, 0x4f, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x6f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6d, 0x12, 0x2a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x46, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf6, 0x01, 0x0a,
	0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x61, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08,
	0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x64, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x6f,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xd1, 0x02, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x61, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x41, 0x4f, 0x48, 0x00, 0x52, 0x03,
	0x64, 0x61, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2a, 0x99, 0x01,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x32, 0x4f, 0x0a, 0x0a, 0x46, 0x65, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x30, 0x01, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_feed_events_proto_rawDescOnce sync.Once
	file_feed_events_proto_rawDescData []byte
)

func file_feed_events_proto_rawDescGZIP() []byte {
	file_feed_events_proto_rawDescOnce.Do(func() {
		file_feed_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_feed_events_proto_rawDesc), len(file_feed_events_proto_rawDesc)))
	})
	return file_feed_events_proto_rawDescData
}

var file_feed_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feed_events_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_feed_events_proto_goTypes = []any{
	(FeedItemType)(0),              // 0: feed.FeedItemType
	(*EventsSubscribeRequest)(nil), // 1: feed.EventsSubscribeRequest
	(*Timeline)(nil),               // 2: feed.Timeline
	(*DAO)(nil),                    // 3: feed.DAO
	(*Proposal)(nil),               // 4: feed.Proposal
	(*Delegate)(nil),               // 5: feed.Delegate
	(*Vote)(nil),                   // 6: feed.Vote
	(*FeedItem)(nil),               // 7: feed.FeedItem
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
	(*anypb.Any)(nil),              // 9: google.protobuf.Any
}
var file_feed_events_proto_depIdxs = []int32{
	0,  // 0: feed.EventsSubscribeRequest.subscription_types:type_name -> feed.FeedItemType
	8,  // 1: feed.EventsSubscribeRequest.last_updated_at:type_name -> google.protobuf.Timestamp
	8,  // 2: feed.Timeline.created_at:type_name -> google.protobuf.Timestamp
	8,  // 3: feed.DAO.created_at:type_name -> google.protobuf.Timestamp
	2,  // 4: feed.DAO.timeline:type_name -> feed.Timeline
	8,  // 5: feed.Proposal.created_at:type_name -> google.protobuf.Timestamp
	2,  // 6: feed.Proposal.timeline:type_name -> feed.Timeline
	8,  // 7: feed.Proposal.original_created_at:type_name -> google.protobuf.Timestamp
	8,  // 8: feed.Proposal.voting_started_at:type_name -> google.protobuf.Timestamp
	8,  // 9: feed.Proposal.voting_ended_at:type_name -> google.protobuf.Timestamp
	8,  // 10: feed.Delegate.due_date:type_name -> google.protobuf.Timestamp
	8,  // 11: feed.Vote.created_at:type_name -> google.protobuf.Timestamp
	9,  // 12: feed.Vote.choice:type_name -> google.protobuf.Any
	8,  // 13: feed.FeedItem.created_at:type_name -> google.protobuf.Timestamp
	8,  // 14: feed.FeedItem.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 15: feed.FeedItem.type:type_name -> feed.FeedItemType
	3,  // 16: feed.FeedItem.dao:type_name -> feed.DAO
	4,  // 17: feed.FeedItem.proposal:type_name -> feed.Proposal
	5,  // 18: feed.FeedItem.delegate:type_name -> feed.Delegate
	6,  // 19: feed.FeedItem.vote:type_name -> feed.Vote
	1,  // 20: feed.FeedEvents.EventsSubscribe:input_type -> feed.EventsSubscribeRequest
	7,  // 21: feed.FeedEvents.EventsSubscribe:output_type -> feed.FeedItem
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_feed_events_proto_init() }
func file_feed_events_proto_init() {
	if File_feed_events_proto != nil {
		return
	}
	file_feed_events_proto_msgTypes[0].OneofWrappers = []any{}
	file_feed_events_proto_msgTypes[4].OneofWrappers = []any{}
	file_feed_events_proto_msgTypes[6].OneofWrappers = []any{
		(*FeedItem_Dao)(nil),
		(*FeedItem_Proposal)(nil),
		(*FeedItem_Delegate)(nil),
		(*FeedItem_Vote)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_feed_events_proto_rawDesc), len(file_feed_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feed_events_proto_goTypes,
		DependencyIndexes: file_feed_events_proto_depIdxs,
		EnumInfos:         file_feed_events_proto_enumTypes,
		MessageInfos:      file_feed_events_proto_msgTypes,
	}.Build()
	File_feed_events_proto = out.File
	file_feed_events_proto_goTypes = nil
	file_feed_events_proto_depIdxs = nil
}
