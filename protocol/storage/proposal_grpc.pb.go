// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proposal.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Proposal_GetByID_FullMethodName     = "/storage.Proposal/GetByID"
	Proposal_GetByFilter_FullMethodName = "/storage.Proposal/GetByFilter"
)

// ProposalClient is the client API for Proposal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProposalClient interface {
	GetByID(ctx context.Context, in *ProposalByIDRequest, opts ...grpc.CallOption) (*ProposalByIDResponse, error)
	GetByFilter(ctx context.Context, in *ProposalByFilterRequest, opts ...grpc.CallOption) (*ProposalByFilterResponse, error)
}

type proposalClient struct {
	cc grpc.ClientConnInterface
}

func NewProposalClient(cc grpc.ClientConnInterface) ProposalClient {
	return &proposalClient{cc}
}

func (c *proposalClient) GetByID(ctx context.Context, in *ProposalByIDRequest, opts ...grpc.CallOption) (*ProposalByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposalByIDResponse)
	err := c.cc.Invoke(ctx, Proposal_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalClient) GetByFilter(ctx context.Context, in *ProposalByFilterRequest, opts ...grpc.CallOption) (*ProposalByFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposalByFilterResponse)
	err := c.cc.Invoke(ctx, Proposal_GetByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalServer is the server API for Proposal service.
// All implementations must embed UnimplementedProposalServer
// for forward compatibility.
type ProposalServer interface {
	GetByID(context.Context, *ProposalByIDRequest) (*ProposalByIDResponse, error)
	GetByFilter(context.Context, *ProposalByFilterRequest) (*ProposalByFilterResponse, error)
	mustEmbedUnimplementedProposalServer()
}

// UnimplementedProposalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProposalServer struct{}

func (UnimplementedProposalServer) GetByID(context.Context, *ProposalByIDRequest) (*ProposalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedProposalServer) GetByFilter(context.Context, *ProposalByFilterRequest) (*ProposalByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFilter not implemented")
}
func (UnimplementedProposalServer) mustEmbedUnimplementedProposalServer() {}
func (UnimplementedProposalServer) testEmbeddedByValue()                  {}

// UnsafeProposalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposalServer will
// result in compilation errors.
type UnsafeProposalServer interface {
	mustEmbedUnimplementedProposalServer()
}

func RegisterProposalServer(s grpc.ServiceRegistrar, srv ProposalServer) {
	// If the following call pancis, it indicates UnimplementedProposalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Proposal_ServiceDesc, srv)
}

func _Proposal_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proposal_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServer).GetByID(ctx, req.(*ProposalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proposal_GetByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServer).GetByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proposal_GetByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServer).GetByFilter(ctx, req.(*ProposalByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Proposal_ServiceDesc is the grpc.ServiceDesc for Proposal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proposal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Proposal",
	HandlerType: (*ProposalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Proposal_GetByID_Handler,
		},
		{
			MethodName: "GetByFilter",
			Handler:    _Proposal_GetByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proposal.proto",
}
